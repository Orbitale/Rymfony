
name: CI

on:
    push:
        branches:
            - '*'
        tags:
            - '*'

jobs:
    check-release:
        name: Check release
        runs-on: ubuntu-latest
        steps:
            - name: Create Release
              id: create_release
              if: startsWith(github.ref, 'refs/tags/')
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}
                  release_name: Release ${{ github.ref }}
                  draft: false
                  prerelease: false

            - name: Save release URL
              if: startsWith(github.ref, 'refs/tags/')
              run: |
                  echo "${{ steps.create_release.outputs.upload_url }}" > release-url.txt

            - name: Store release URL into artifact
              if: startsWith(github.ref, 'refs/tags/')
              uses: actions/upload-artifact@v2
              with:
                  name: release-url
                  path: release-url.txt

    build:
        runs-on: ${{ matrix.os }}
        needs: [check-release]
        strategy:
            matrix:
                os: [ubuntu-latest, macOS-latest]
                rust: [stable]

        steps:
            - uses: actions/checkout@master

            - name: Setup cache
              uses: actions/cache@v2
              with:
                path: |
                  ~/.cargo/registry
                  ~/.cargo/git
                  target/
                key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - uses: hecrj/setup-rust-action@v1
              with:
                  rust-version: ${{ matrix.rust }}

            - name: (release only) Fetch release URL
              uses: actions/download-artifact@v2
              id: download-artifacts
              if: startsWith(github.ref, 'refs/tags/')
              with:
                  name: release-url
                  path: artifacts

            - name: (release only) Store release URL
              if: startsWith(github.ref, 'refs/tags/')
              id: vars
              run: |
                  echo ::set-output name=RELEASE_URL::`cat ${{ steps.download-artifacts.outputs.download-path }}/release-url.txt`
                  echo ::set-output name=RELEASE_VERSION::${GITHUB_REF#refs/tags/*}
                  export RELEASE_OS="${{ matrix.os }}"
                  echo ::set-output name=RELEASE_OS::${RELEASE_OS/-latest/}
                  echo ::set-output name=GITHUB_SHA_SHORT::${GITHUB_SHA::8}
                  echo "${RELEASE_OS/-latest/}-${GITHUB_SHA::8}-`date "+%Y-%m-%d--%H-%M-%S"`-nightly" > build_type.txt

            - name: 🏗 Build
              run: |
                cargo build --release --all-targets

            - name: (main branch only) Push nightly build
              uses: actions/upload-artifact@v2
              if: github.ref == 'refs/heads/main'
              with:
                name: rymfony.${{ steps.vars.outputs.RELEASE_OS }}.${{ steps.vars.outputs.GITHUB_SHA }}
                path: target/release/rymfony

            - name: (release only) Upload Release
              uses: actions/upload-release-asset@v1
              if: startsWith(github.ref, 'refs/tags/')
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.vars.outputs.RELEASE_URL }}
                  asset_path: target/artifacts/rymfony.${{ matrix.os }}
                  asset_name: rymfony-${{ steps.vars.outputs.RELEASE_OS }}-${{ steps.vars.outputs.RELEASE_VERSION }}
                  asset_content_type: application/zip

    build-windows:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [windows-latest]
                rust: [stable]

        steps:
            - uses: actions/checkout@master

            - name: Set tag on release
              if: startsWith(github.ref, 'refs/tags/')
              id: vars
              run: echo ::set-output name=RELEASE_VERSION::${GITHUB_REF#refs/*/}
              shell: bash

            - uses: actions/cache@v2
              with:
                path: |
                  ~/.cargo/registry
                  ~/.cargo/git
                  %HOME%/.cargo/registry
                  %HOME%/.cargo/git
                  target/
                key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - uses: hecrj/setup-rust-action@v1
              with:
                  rust-version: ${{ matrix.rust }}

            - name: Build
              run: |
                (test-path .\target\artifacts\) ? $null : (mkdir .\target\artifacts\)
                $_BUILDOS="${{ matrix.os }}" -replace '-latest',''
                $GITHUB_SHA=$env:GITHUB_SHA.substring(0,8)
                $_DATE = Get-Date -Format "yyyy-MM-dd--HH-mm-ss"
                echo $_BUILDOS-$GITHUB_SHA-$_DATE-nightly > build_type.txt
                cargo build --release --all-targets
                move .\target\release\rymfony.exe .\target\artifacts\rymfony.${{ matrix.os }}.exe

            - name: Push nightly build
              uses: actions/upload-artifact@v2
              if: github.ref == 'refs/heads/main'
              with:
                name: nightly.${{ matrix.os }}
                path: target/artifacts/rymfony.${{ matrix.os }}.exe

            - name: Push release build
              uses: actions/upload-artifact@v2
              if: startsWith(github.ref, 'refs/tags/')
              with:
                  name: ${{ steps.vars.outputs.RELEASE_VERSION }}.${{ matrix.os }}
                  path: target/artifacts/rymfony.${{ matrix.os }}
