
name: CI

on:
    push:
        branches:
            - '*'
        tags:
            - '*'

jobs:
    check-release:
        name: Check release
        runs-on: ubuntu-latest
        steps:
            - name: Create Release
              id: create_release
              if: startsWith(github.ref, 'refs/tags/')
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}
                  release_name: Release ${{ github.ref }}
                  draft: false
                  prerelease: false

            - name: Save release URL
              if: startsWith(github.ref, 'refs/tags/')
              run: |
                  echo "${{ steps.create_release.outputs.upload_url }}" > release-url.txt

            - name: Store release URL into artifact
              if: startsWith(github.ref, 'refs/tags/')
              uses: actions/upload-artifact@v2
              with:
                  name: release-url
                  path: release-url.txt

    build-ubuntu:
        runs-on: ${{ matrix.os }}
        needs: [check-release]
        strategy:
            matrix:
                os: [ubuntu-latest]
                rust: [stable]

        steps:
            - uses: actions/checkout@master

            - name: Get Composer Cache Directory
              id: composer-cache
              run: |
                echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

            - name: Setup PHP cache
              uses: actions/cache@v3
              with:
                path: ${{ steps.composer-cache.outputs.dir }}
                key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
                restore-keys: |
                  ${{ runner.os }}-composer-

            - name: Setup Rust cache
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - uses: hecrj/setup-rust-action@v1
              with:
                  rust-version: ${{ matrix.rust }}

            - name: (release only) Fetch release URL
              uses: actions/download-artifact@v2
              id: download_artifacts
              if: startsWith(github.ref, 'refs/tags/')
              with:
                  name: release-url
                  path: artifacts

            - name: Prepare build metadata
              id: vars
              run: |
                  artifacts_path="${{ steps.download_artifacts.outputs.download-path }}"
                  [[ $artifacts_path == "" ]] && artifacts_path="." # Prevents touching the "/" path.

                  if touch "$artifacts_path/release-url.txt" ; then
                      RELEASE_URL="$(cat "$artifacts_path/release-url.txt")"
                      echo "Release url: $RELEASE_URL"
                      echo "RELEASE_URL=$RELEASE_URL" >> $GITHUB_OUTPUT
                  fi

                  echo "GITHUB_SHA_SHORT=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

                  echo "RELEASE_VERSION="${GITHUB_REF#refs/tags/*}"" >> $GITHUB_OUTPUT

                  export RELEASE_OS="${{ matrix.os }}"
                  echo "RELEASE_OS=${RELEASE_OS/-latest/}" >> $GITHUB_OUTPUT

                  echo "RELEASE_DATE=`date "+%Y-%m-%d %H:%M:%S"`" >> $GITHUB_OUTPUT
            - name: (release only) Save build metadata
              if: startsWith(github.ref, 'refs/tags/')
              run: |
                  echo "${{ steps.vars.outputs.RELEASE_VERSION }} ${{ steps.vars.outputs.RELEASE_OS }} (${{ steps.vars.outputs.RELEASE_DATE }})" > .version

            - name: (main branch only) Save build metadata
              if: github.ref == 'refs/heads/main'
              run: |
                  echo "nightly ${{ steps.vars.outputs.GITHUB_SHA_SHORT }} ${{ steps.vars.outputs.RELEASE_OS }} (${{ steps.vars.outputs.RELEASE_DATE }})" > .version

            - name: (Mac only) Install "coreutils" to be able to get file hash
              if: runner.os == 'macOS'
              run: |
                  brew install coreutils

            - name: üõí Download Caddy
              run: |
                  bin/download_caddy.bash

            - name: üèó Build
              run: |
                  cat .version

                  cargo build --release

            - name: üêò Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.1'

            - name: üß™ Prepare test setup
              run: |
                  composer install

            - name: ‚öóÔ∏è Execute tests
              run: |
                  php vendor/bin/phpunit

            - name: (main branch only) Push nightly build
              uses: actions/upload-artifact@v2
              if: github.ref == 'refs/heads/main'
              with:
                  name: rymfony.${{ steps.vars.outputs.RELEASE_OS }}
                  path: target/release/rymfony

            - name: (release only) Upload Release
              uses: actions/upload-release-asset@v1
              if: startsWith(github.ref, 'refs/tags/')
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.vars.outputs.RELEASE_URL }}
                  asset_path: target/release/rymfony
                  asset_name: rymfony-${{ steps.vars.outputs.RELEASE_OS }}-${{ steps.vars.outputs.RELEASE_VERSION }}
                  asset_content_type: application/zip

    build-windows:
        runs-on: ${{ matrix.os }}
        needs: [check-release]
        strategy:
            matrix:
                os: [windows-latest]
                rust: [stable]

        steps:
            - uses: actions/checkout@master

            - name: Setup Rust cache
              uses: actions/cache@v2
              with:
                  path: |
                      %HOME%/.cargo/bin/
                      %HOME%/.cargo/registry/index/
                      %HOME%/.cargo/registry/cache/
                      %HOME%/.cargo/git/db/
                      target/
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - uses: hecrj/setup-rust-action@v1
              with:
                  rust-version: ${{ matrix.rust }}

            - name: (release only) Fetch release URL
              uses: actions/download-artifact@v2
              id: download_artifacts
              if: startsWith(github.ref, 'refs/tags/')
              with:
                  name: release-url
                  path: artifacts

            - name: Prepare build metadata
              id: vars
              shell: bash
              run: |
                  artifacts_path="${{ steps.download_artifacts.outputs.download-path }}"
                  [[ $artifacts_path == "" ]] && artifacts_path="." # Prevents touching the "/" path.

                  if touch "$artifacts_path/release-url.txt" ; then
                      RELEASE_URL="$(cat "$artifacts_path/release-url.txt")"
                      echo "Release url: $RELEASE_URL"
                      echo "RELEASE_URL=$RELEASE_URL" >> $GITHUB_OUTPUT
                  fi

                  echo "GITHUB_SHA_SHORT=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

                  echo "RELEASE_VERSION="${GITHUB_REF#refs/tags/*}"" >> $GITHUB_OUTPUT

                  export RELEASE_OS="${{ matrix.os }}"
                  echo "RELEASE_OS=${RELEASE_OS/-latest/}" >> $GITHUB_OUTPUT

                  echo "RELEASE_DATE=`date "+%Y-%m-%d %H:%M:%S"`" >> $GITHUB_OUTPUT

            - name: (release only) Save build metadata
              if: startsWith(github.ref, 'refs/tags/')
              run: |
                  echo "${{ steps.vars.outputs.RELEASE_VERSION }} ${{ steps.vars.outputs.RELEASE_OS }} (${{ steps.vars.outputs.RELEASE_DATE }})" > .version

            - name: (main branch only) Save build metadata
              if: github.ref == 'refs/heads/main'
              run: |
                  echo "nightly ${{ steps.vars.outputs.GITHUB_SHA_SHORT }} ${{ steps.vars.outputs.RELEASE_OS }} (${{ steps.vars.outputs.RELEASE_DATE }})" > .version

            - name: üõí Download Caddy
              run: |
                  bin/download_caddy.ps1

            - name: üèó Build
              run: |
                  cat .version

                  cargo build --release

            - name: (main branch only) Push nightly build
              uses: actions/upload-artifact@v2
              if: github.ref == 'refs/heads/main'
              with:
                  name: rymfony.${{ steps.vars.outputs.RELEASE_OS }}
                  path: target/release/rymfony.exe

            - name: (release only) Upload Release
              uses: actions/upload-release-asset@v1
              if: startsWith(github.ref, 'refs/tags/')
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.vars.outputs.RELEASE_URL }}
                  asset_path: target/release/rymfony.exe
                  asset_name: rymfony-${{ steps.vars.outputs.RELEASE_OS }}-${{ steps.vars.outputs.RELEASE_VERSION }}.exe
                  asset_content_type: application/zip

    remove-artifacts:
        name: Remove artifacts
        runs-on: ubuntu-latest
        needs:
            - build-ubuntu
            - build-windows
        steps:
            - name: Remove URL artifacts
              uses: geekyeggo/delete-artifact@v1
              if: startsWith(github.ref, 'refs/tags/')
              with: { name: release-url }
