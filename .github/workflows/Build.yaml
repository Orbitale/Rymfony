
name: Build

on:
    push:
        branches:
            - main
        tags:
            - '*'

jobs:
    check-release:
        name: Check release
        runs-on: ubuntu-latest
        steps:
            - name: Create Release
              id: create_release
              if: startsWith(github.ref, 'refs/tags/')
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}
                  release_name: Release ${{ github.ref }}
                  draft: false
                  prerelease: false

            - name: Save release URL
              if: startsWith(github.ref, 'refs/tags/')
              run: |
                  echo "${{ steps.create_release.outputs.upload_url }}" > release-url.txt

            - name: Store release URL into artifact
              if: startsWith(github.ref, 'refs/tags/')
              uses: actions/upload-artifact@v2
              with:
                  name: release-url
                  path: release-url.txt

    build:
        runs-on: ${{ matrix.os }}
        needs: [check-release]
        strategy:
            matrix:
                os: [ubuntu-latest, macOS-latest]
                rust: [stable]

        steps:
            - uses: actions/checkout@master

            - name: Setup cache
              uses: actions/cache@v2
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target/release/build
                      target/release/deps
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - uses: hecrj/setup-rust-action@v1
              with:
                  rust-version: ${{ matrix.rust }}

            - name: (release only) Fetch release URL
              uses: actions/download-artifact@v2
              id: download_artifacts
              if: startsWith(github.ref, 'refs/tags/')
              with:
                  name: release-url
                  path: artifacts

            - name: Prepare build metadata
              id: vars
              run: |
                  artifacts_path="${{ steps.download_artifacts.outputs.download-path }}"
                  [[ $artifacts_path == "" ]] && artifacts_path="." # Prevents touching the "/" path.

                  if touch "$artifacts_path/release-url.txt" ; then
                      RELEASE_URL="$(cat "$artifacts_path/release-url.txt")"
                      echo "Release url: $RELEASE_URL"
                      echo "::set-output name=RELEASE_URL::$RELEASE_URL"
                  fi

                  echo "::set-output name=GITHUB_SHA_SHORT::${GITHUB_SHA::8}"

                  echo "::set-output name=RELEASE_VERSION::"${GITHUB_REF#refs/tags/*}""

                  export RELEASE_OS="${{ matrix.os }}"
                  echo "::set-output name=RELEASE_OS::${RELEASE_OS/-latest/}"

                  echo "::set-output name=RELEASE_DATE::`date "+%Y-%m-%d %H:%M:%S"`"
            - name: (release only) Save build metadata
              if: startsWith(github.ref, 'refs/tags/')
              run: |
                  echo "${{ steps.vars.outputs.RELEASE_VERSION }} ${{ steps.vars.outputs.RELEASE_OS }} (${{ steps.vars.outputs.RELEASE_DATE }})" > build_metadata.txt

            - name: (main branch only) Save build metadata
              if: github.ref == 'refs/heads/main'
              run: |
                  echo "nightly ${{ steps.vars.outputs.GITHUB_SHA_SHORT }} ${{ steps.vars.outputs.RELEASE_OS }} (${{ steps.vars.outputs.RELEASE_DATE }})" > build_metadata.txt

            - name: üèó Build
              run: |
                  cat build_metadata.txt

                  cargo build --release

            - name: (main branch only) Push nightly build
              uses: actions/upload-artifact@v2
              if: github.ref == 'refs/heads/main'
              with:
                  name: rymfony.${{ steps.vars.outputs.RELEASE_OS }}
                  path: target/release/rymfony

            - name: (release only) Upload Release
              uses: actions/upload-release-asset@v1
              if: startsWith(github.ref, 'refs/tags/')
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.vars.outputs.RELEASE_URL }}
                  asset_path: target/release/rymfony
                  asset_name: rymfony-${{ steps.vars.outputs.RELEASE_OS }}-${{ steps.vars.outputs.RELEASE_VERSION }}
                  asset_content_type: application/zip

    build-windows:
        runs-on: ${{ matrix.os }}
        needs: [check-release]
        strategy:
            matrix:
                os: [windows-latest]
                rust: [stable]

        steps:
            - uses: actions/checkout@master

            - name: Setup cache
              uses: actions/cache@v2
              with:
                  path: |
                      %HOME%/.cargo/registry
                      %HOME%/.cargo/git
                      target/release/build
                      target/release/deps
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - uses: hecrj/setup-rust-action@v1
              with:
                  rust-version: ${{ matrix.rust }}

            - name: (release only) Fetch release URL
              uses: actions/download-artifact@v2
              id: download_artifacts
              if: startsWith(github.ref, 'refs/tags/')
              with:
                  name: release-url
                  path: artifacts

            - name: Prepare build metadata
              id: vars
              shell: bash
              run: |
                  artifacts_path="${{ steps.download_artifacts.outputs.download-path }}"
                  [[ $artifacts_path == "" ]] && artifacts_path="." # Prevents touching the "/" path.

                  if touch "$artifacts_path/release-url.txt" ; then
                      RELEASE_URL="$(cat "$artifacts_path/release-url.txt")"
                      echo "Release url: $RELEASE_URL"
                      echo "::set-output name=RELEASE_URL::$RELEASE_URL"
                  fi

                  echo "::set-output name=GITHUB_SHA_SHORT::${GITHUB_SHA::8}"

                  echo "::set-output name=RELEASE_VERSION::"${GITHUB_REF#refs/tags/*}""

                  export RELEASE_OS="${{ matrix.os }}"
                  echo "::set-output name=RELEASE_OS::${RELEASE_OS/-latest/}"

                  echo "::set-output name=RELEASE_DATE::`date "+%Y-%m-%d %H:%M:%S"`"

            - name: (release only) Save build metadata
              if: startsWith(github.ref, 'refs/tags/')
              run: |
                  echo "${{ steps.vars.outputs.RELEASE_VERSION }} ${{ steps.vars.outputs.RELEASE_OS }} (${{ steps.vars.outputs.RELEASE_DATE }})" > build_metadata.txt

            - name: (main branch only) Save build metadata
              if: github.ref == 'refs/heads/main'
              run: |
                  echo "nightly ${{ steps.vars.outputs.GITHUB_SHA_SHORT }} ${{ steps.vars.outputs.RELEASE_OS }} (${{ steps.vars.outputs.RELEASE_DATE }})" > build_metadata.txt

            - name: üèó Build
              run: |
                  cat build_metadata.txt

                  cargo build --release

            - name: (main branch only) Push nightly build
              uses: actions/upload-artifact@v2
              if: github.ref == 'refs/heads/main'
              with:
                  name: rymfony.${{ steps.vars.outputs.RELEASE_OS }}
                  path: target/release/rymfony.exe

            - name: (release only) Upload Release
              uses: actions/upload-release-asset@v1
              if: startsWith(github.ref, 'refs/tags/')
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.vars.outputs.RELEASE_URL }}
                  asset_path: target/release/rymfony.exe
                  asset_name: rymfony-${{ steps.vars.outputs.RELEASE_OS }}-${{ steps.vars.outputs.RELEASE_VERSION }}.exe
                  asset_content_type: application/zip

    remove-artifacts:
        name: Remove artifacts
        runs-on: ubuntu-latest
        needs:
            - build
            - build-windows
        steps:
            - name: Remove URL artifacts
              uses: geekyeggo/delete-artifact@v1
              if: startsWith(github.ref, 'refs/tags/')
              with: { name: release-url }